"""
Dashboard Principal - An√°lise do Desmatamento no Par√°
"""
import streamlit as st
import warnings
import sys
from pathlib import Path

warnings.filterwarnings('ignore')

# Adicionar o diret√≥rio atual ao path
current_dir = Path(__file__).parent
sys.path.insert(0, str(current_dir))

# Importar configura√ß√µes
from config.settings import PAGE_CONFIG

# Configurar p√°gina
st.set_page_config(**PAGE_CONFIG)

# Importar m√≥dulos
from data.loader import DataLoader
from components import (
    render_spatial_analysis,
    render_temporal_analysis,
    render_model_analysis
)


def main():
    """Fun√ß√£o principal do dashboard"""
    
    # Header do dashboard
    st.markdown("""
    <h1 style='text-align: center; color: #2E8B57;'>
        üå≥ An√°lise do Desmatamento no Par√°
    </h1>
    <p style='text-align: center; font-size: 18px; color: #666;'>
        Dashboard interativo com insights acion√°veis e previs√µes baseadas em Machine Learning
    </p>
    """, unsafe_allow_html=True)
    
    st.markdown("---")
    
    # Carregar dados com loading spinner
    with st.spinner("üîÑ Carregando dados e modelos..."):
        # Carregar dados base
        df_base, _, predictions = DataLoader.load_base_data()
        
        if df_base is None:
            st.error("‚ùå Erro ao carregar dados. Verifique se os arquivos est√£o dispon√≠veis.")
            return
        
        # Carregar dados adicionais
        model_results = DataLoader.load_model_results()
        best_model, best_metadata, best_result = DataLoader.load_best_model()
        feature_importance = DataLoader.load_feature_importance()
        gdf = DataLoader.load_shapefile()
    
    # Sidebar com informa√ß√µes e filtros
    with st.sidebar:
        st.markdown("### üìä Painel de Controle")
        
        # Informa√ß√µes gerais
        st.markdown("#### üìà Estat√≠sticas Gerais")
        
        # Per√≠odo de an√°lise
        min_year = int(df_base['ano'].min())
        max_year = int(df_base['ano'].max())
        st.markdown(f"**Per√≠odo de An√°lise:** {min_year}‚Äì{max_year}")
        
        col1, col2 = st.columns(2)
        with col1:
            st.metric("Munic√≠pios", df_base['NM_MUN'].nunique())
        with col2:
            st.metric("Registros", f"{len(df_base):,}")
        
        # Verificar munic√≠pios ausentes
        if gdf is not None:
            gdf_mun = set(gdf['NM_MUN'].unique())
            df_mun = set(df_base['NM_MUN'].unique())
            
            missing_mun = gdf_mun - df_mun
            if missing_mun:
                st.warning(f"Munic√≠pio ausente nos dados: **{', '.join(missing_mun)}**")

        st.markdown("---")
        
        
        # Informa√ß√µes adicionais
        with st.expander("‚ÑπÔ∏è Sobre o Dashboard"):
            st.markdown("""
            **Vers√£o:** 2.1.0  
            **√öltima Atualiza√ß√£o:** Dados at√© 2023
            
            **Fontes de Dados:**
            - PRODES/INPE (Desmatamento)
            - IBAMA (Fiscaliza√ß√£o)
            - IPS Amaz√¥nia (Indicadores Sociais)
            - IBGE (Dados Socioecon√¥micos)
            
            **Metodologia:**
            - Modelos: Random Forest e XGBoost
            - Valida√ß√£o: Time Series Split (walk-forward)
            - Features: 
                - Indicadores Socioecon√¥micos
                - Indicadores de Fiscaliza√ß√£o
                - Indicadores de Desmatamento
            """)
    
    # Tabs principais
    tab_names = ["üìà An√°lise Temporal", "üó∫Ô∏è An√°lise Espacial", "ü§ñ An√°lise de Modelos"]
    
    # Verificar tab selecionada no session state
    if 'tab' not in st.session_state:
        st.session_state['tab'] = 'temporal'
    
    # Mapear tabs
    tab_map = {
        'temporal': 0,
        'spatial': 1,
        'models': 2
    }
    
    default_index = tab_map.get(st.session_state.get('tab', 'temporal'), 0)
    
    tabs = st.tabs(tab_names)
    
    # Renderizar conte√∫do das tabs
    with tabs[0]:
        render_temporal_analysis(
            df_base, 
            model=best_model, 
            metadata=best_metadata, 
            predictions_hist_df=predictions
        )
    
    with tabs[1]:
        render_spatial_analysis(df_base, gdf)
    
    with tabs[2]:
        render_model_analysis(model_results, feature_importance, best_result)
    
    # Footer
    st.markdown("---")
    st.markdown("""
    <div style='text-align: center; color: #666; font-size: 14px;'>
        <p>Desenvolvido com ‚ù§Ô∏è por Pedro Mambelli | 
        Dados atualizados at√© 2023 | 
        <a href='https://github.com/pedro-mambelli' target='_blank'>GitHub</a>
        </p>
    </div>
    """, unsafe_allow_html=True)


if __name__ == "__main__":
    main() 